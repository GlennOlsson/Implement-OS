
; FILE GENERATED BY /home/cpe454/Desktop/OS/src/py/init_ints_generator.py
; ANY CHANGES TO THIS FILE WILL BE OVERWRITTEN BY THE SCRIPT

extern setup_idt
extern generic_interrupt_handler

extern VGA_print_long_hex
extern VGA_display_char

global init_ints

global isr0
global isr1
global isr2
global isr3
global isr4
global isr5
global isr6
global isr7
global isr8
global isr9
global isr10
global isr11
global isr12
global isr13
global isr14
global isr15
global isr16
global isr17
global isr18
global isr19
global isr20
global isr21
global isr22
global isr23
global isr24
global isr25
global isr26
global isr27
global isr28
global isr29
global isr30
global isr31
global isr32
global isr33
global isr34
global isr35
global isr36
global isr37
global isr38
global isr39
global isr40
global isr41
global isr42
global isr43
global isr44
global isr45
global isr46
global isr47
global isr48
global isr49
global isr50
global isr51
global isr52
global isr53
global isr54
global isr55
global isr56
global isr57
global isr58
global isr59
global isr60
global isr61
global isr62
global isr63
global isr64
global isr65
global isr66
global isr67
global isr68
global isr69
global isr70
global isr71
global isr72
global isr73
global isr74
global isr75
global isr76
global isr77
global isr78
global isr79
global isr80
global isr81
global isr82
global isr83
global isr84
global isr85
global isr86
global isr87
global isr88
global isr89
global isr90
global isr91
global isr92
global isr93
global isr94
global isr95
global isr96
global isr97
global isr98
global isr99
global isr100
global isr101
global isr102
global isr103
global isr104
global isr105
global isr106
global isr107
global isr108
global isr109
global isr110
global isr111
global isr112
global isr113
global isr114
global isr115
global isr116
global isr117
global isr118
global isr119
global isr120
global isr121
global isr122
global isr123
global isr124
global isr125
global isr126
global isr127
global isr128
global isr129
global isr130
global isr131
global isr132
global isr133
global isr134
global isr135
global isr136
global isr137
global isr138
global isr139
global isr140
global isr141
global isr142
global isr143
global isr144
global isr145
global isr146
global isr147
global isr148
global isr149
global isr150
global isr151
global isr152
global isr153
global isr154
global isr155
global isr156
global isr157
global isr158
global isr159
global isr160
global isr161
global isr162
global isr163
global isr164
global isr165
global isr166
global isr167
global isr168
global isr169
global isr170
global isr171
global isr172
global isr173
global isr174
global isr175
global isr176
global isr177
global isr178
global isr179
global isr180
global isr181
global isr182
global isr183
global isr184
global isr185
global isr186
global isr187
global isr188
global isr189
global isr190
global isr191
global isr192
global isr193
global isr194
global isr195
global isr196
global isr197
global isr198
global isr199
global isr200
global isr201
global isr202
global isr203
global isr204
global isr205
global isr206
global isr207
global isr208
global isr209
global isr210
global isr211
global isr212
global isr213
global isr214
global isr215
global isr216
global isr217
global isr218
global isr219
global isr220
global isr221
global isr222
global isr223
global isr224
global isr225
global isr226
global isr227
global isr228
global isr229
global isr230
global isr231
global isr232
global isr233
global isr234
global isr235
global isr236
global isr237
global isr238
global isr239
global isr240
global isr241
global isr242
global isr243
global isr244
global isr245
global isr246
global isr247
global isr248
global isr249
global isr250
global isr251
global isr252
global isr253
global isr254
global isr255

section .bss
align 8
curr_isr:
	resb 8

error_code:
	resb 4


section .text
init_ints:
	cli ; dissable interrupts

	call setup_idt ; Setup IDT in C

	lidt [RAX] ; return value from c

	; enable interrupts in kmain

	ret

push_reg: ; Push all registers
	push RSI
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	push R14
	push R15
	push RAX
	push RCX
	push RDX
	push RDI
	push R8
	push R9
	push R10
	push R11 ; 16 8-byte registers

	jmp [curr_isr]

pop_reg: ; Pop in FILO order, and iretq
	pop R11
	pop R10
	pop R9
	pop R8
	pop RDI
	pop RDX
	pop RCX
	pop RAX
	pop R15
	pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP
	pop RSI

	iretq

isr0:
	mov qword [curr_isr], isr0.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 0 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr1:
	mov qword [curr_isr], isr1.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 1 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr2:
	mov qword [curr_isr], isr2.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 2 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr3:
	mov qword [curr_isr], isr3.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 3 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr4:
	mov qword [curr_isr], isr4.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 4 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr5:
	mov qword [curr_isr], isr5.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 5 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr6:
	mov qword [curr_isr], isr6.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 6 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr7:
	mov qword [curr_isr], isr7.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 7 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr8:
	mov qword [curr_isr], isr8.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 8 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr9:
	mov qword [curr_isr], isr9.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 9 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr10:
	mov qword [curr_isr], isr10.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 10 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr11:
	mov qword [curr_isr], isr11.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 11 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr12:
	mov qword [curr_isr], isr12.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 12 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr13:
	mov qword [curr_isr], isr13.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 13 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr14:
	mov qword [curr_isr], isr14.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 14 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr15:
	mov qword [curr_isr], isr15.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 15 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr16:
	mov qword [curr_isr], isr16.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 16 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr17:
	mov qword [curr_isr], isr17.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 17 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr18:
	mov qword [curr_isr], isr18.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 18 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr19:
	mov qword [curr_isr], isr19.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 19 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr20:
	mov qword [curr_isr], isr20.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 20 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr21:
	mov qword [curr_isr], isr21.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 21 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr22:
	mov qword [curr_isr], isr22.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 22 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr23:
	mov qword [curr_isr], isr23.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 23 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr24:
	mov qword [curr_isr], isr24.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 24 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr25:
	mov qword [curr_isr], isr25.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 25 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr26:
	mov qword [curr_isr], isr26.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 26 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr27:
	mov qword [curr_isr], isr27.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 27 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr28:
	mov qword [curr_isr], isr28.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 28 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr29:
	mov qword [curr_isr], isr29.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 29 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr30:
	mov qword [curr_isr], isr30.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 30 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr31:
	mov qword [curr_isr], isr31.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 31 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr32:
	mov qword [curr_isr], isr32.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 32 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr33:
	mov qword [curr_isr], isr33.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 33 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr34:
	mov qword [curr_isr], isr34.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 34 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr35:
	mov qword [curr_isr], isr35.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 35 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr36:
	mov qword [curr_isr], isr36.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 36 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr37:
	mov qword [curr_isr], isr37.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 37 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr38:
	mov qword [curr_isr], isr38.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 38 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr39:
	mov qword [curr_isr], isr39.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 39 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr40:
	mov qword [curr_isr], isr40.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 40 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr41:
	mov qword [curr_isr], isr41.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 41 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr42:
	mov qword [curr_isr], isr42.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 42 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr43:
	mov qword [curr_isr], isr43.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 43 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr44:
	mov qword [curr_isr], isr44.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 44 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr45:
	mov qword [curr_isr], isr45.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 45 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr46:
	mov qword [curr_isr], isr46.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 46 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr47:
	mov qword [curr_isr], isr47.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 47 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr48:
	mov qword [curr_isr], isr48.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 48 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr49:
	mov qword [curr_isr], isr49.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 49 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr50:
	mov qword [curr_isr], isr50.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 50 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr51:
	mov qword [curr_isr], isr51.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 51 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr52:
	mov qword [curr_isr], isr52.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 52 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr53:
	mov qword [curr_isr], isr53.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 53 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr54:
	mov qword [curr_isr], isr54.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 54 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr55:
	mov qword [curr_isr], isr55.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 55 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr56:
	mov qword [curr_isr], isr56.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 56 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr57:
	mov qword [curr_isr], isr57.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 57 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr58:
	mov qword [curr_isr], isr58.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 58 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr59:
	mov qword [curr_isr], isr59.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 59 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr60:
	mov qword [curr_isr], isr60.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 60 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr61:
	mov qword [curr_isr], isr61.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 61 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr62:
	mov qword [curr_isr], isr62.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 62 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr63:
	mov qword [curr_isr], isr63.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 63 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr64:
	mov qword [curr_isr], isr64.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 64 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr65:
	mov qword [curr_isr], isr65.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 65 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr66:
	mov qword [curr_isr], isr66.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 66 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr67:
	mov qword [curr_isr], isr67.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 67 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr68:
	mov qword [curr_isr], isr68.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 68 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr69:
	mov qword [curr_isr], isr69.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 69 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr70:
	mov qword [curr_isr], isr70.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 70 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr71:
	mov qword [curr_isr], isr71.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 71 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr72:
	mov qword [curr_isr], isr72.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 72 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr73:
	mov qword [curr_isr], isr73.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 73 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr74:
	mov qword [curr_isr], isr74.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 74 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr75:
	mov qword [curr_isr], isr75.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 75 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr76:
	mov qword [curr_isr], isr76.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 76 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr77:
	mov qword [curr_isr], isr77.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 77 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr78:
	mov qword [curr_isr], isr78.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 78 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr79:
	mov qword [curr_isr], isr79.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 79 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr80:
	mov qword [curr_isr], isr80.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 80 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr81:
	mov qword [curr_isr], isr81.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 81 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr82:
	mov qword [curr_isr], isr82.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 82 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr83:
	mov qword [curr_isr], isr83.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 83 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr84:
	mov qword [curr_isr], isr84.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 84 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr85:
	mov qword [curr_isr], isr85.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 85 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr86:
	mov qword [curr_isr], isr86.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 86 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr87:
	mov qword [curr_isr], isr87.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 87 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr88:
	mov qword [curr_isr], isr88.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 88 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr89:
	mov qword [curr_isr], isr89.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 89 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr90:
	mov qword [curr_isr], isr90.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 90 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr91:
	mov qword [curr_isr], isr91.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 91 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr92:
	mov qword [curr_isr], isr92.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 92 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr93:
	mov qword [curr_isr], isr93.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 93 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr94:
	mov qword [curr_isr], isr94.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 94 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr95:
	mov qword [curr_isr], isr95.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 95 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr96:
	mov qword [curr_isr], isr96.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 96 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr97:
	mov qword [curr_isr], isr97.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 97 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr98:
	mov qword [curr_isr], isr98.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 98 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr99:
	mov qword [curr_isr], isr99.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 99 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr100:
	mov qword [curr_isr], isr100.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 100 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr101:
	mov qword [curr_isr], isr101.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 101 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr102:
	mov qword [curr_isr], isr102.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 102 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr103:
	mov qword [curr_isr], isr103.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 103 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr104:
	mov qword [curr_isr], isr104.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 104 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr105:
	mov qword [curr_isr], isr105.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 105 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr106:
	mov qword [curr_isr], isr106.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 106 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr107:
	mov qword [curr_isr], isr107.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 107 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr108:
	mov qword [curr_isr], isr108.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 108 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr109:
	mov qword [curr_isr], isr109.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 109 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr110:
	mov qword [curr_isr], isr110.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 110 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr111:
	mov qword [curr_isr], isr111.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 111 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr112:
	mov qword [curr_isr], isr112.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 112 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr113:
	mov qword [curr_isr], isr113.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 113 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr114:
	mov qword [curr_isr], isr114.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 114 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr115:
	mov qword [curr_isr], isr115.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 115 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr116:
	mov qword [curr_isr], isr116.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 116 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr117:
	mov qword [curr_isr], isr117.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 117 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr118:
	mov qword [curr_isr], isr118.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 118 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr119:
	mov qword [curr_isr], isr119.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 119 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr120:
	mov qword [curr_isr], isr120.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 120 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr121:
	mov qword [curr_isr], isr121.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 121 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr122:
	mov qword [curr_isr], isr122.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 122 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr123:
	mov qword [curr_isr], isr123.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 123 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr124:
	mov qword [curr_isr], isr124.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 124 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr125:
	mov qword [curr_isr], isr125.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 125 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr126:
	mov qword [curr_isr], isr126.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 126 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr127:
	mov qword [curr_isr], isr127.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 127 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr128:
	mov qword [curr_isr], isr128.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 128 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr129:
	mov qword [curr_isr], isr129.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 129 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr130:
	mov qword [curr_isr], isr130.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 130 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr131:
	mov qword [curr_isr], isr131.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 131 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr132:
	mov qword [curr_isr], isr132.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 132 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr133:
	mov qword [curr_isr], isr133.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 133 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr134:
	mov qword [curr_isr], isr134.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 134 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr135:
	mov qword [curr_isr], isr135.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 135 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr136:
	mov qword [curr_isr], isr136.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 136 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr137:
	mov qword [curr_isr], isr137.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 137 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr138:
	mov qword [curr_isr], isr138.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 138 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr139:
	mov qword [curr_isr], isr139.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 139 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr140:
	mov qword [curr_isr], isr140.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 140 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr141:
	mov qword [curr_isr], isr141.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 141 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr142:
	mov qword [curr_isr], isr142.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 142 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr143:
	mov qword [curr_isr], isr143.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 143 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr144:
	mov qword [curr_isr], isr144.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 144 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr145:
	mov qword [curr_isr], isr145.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 145 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr146:
	mov qword [curr_isr], isr146.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 146 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr147:
	mov qword [curr_isr], isr147.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 147 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr148:
	mov qword [curr_isr], isr148.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 148 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr149:
	mov qword [curr_isr], isr149.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 149 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr150:
	mov qword [curr_isr], isr150.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 150 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr151:
	mov qword [curr_isr], isr151.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 151 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr152:
	mov qword [curr_isr], isr152.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 152 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr153:
	mov qword [curr_isr], isr153.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 153 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr154:
	mov qword [curr_isr], isr154.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 154 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr155:
	mov qword [curr_isr], isr155.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 155 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr156:
	mov qword [curr_isr], isr156.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 156 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr157:
	mov qword [curr_isr], isr157.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 157 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr158:
	mov qword [curr_isr], isr158.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 158 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr159:
	mov qword [curr_isr], isr159.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 159 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr160:
	mov qword [curr_isr], isr160.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 160 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr161:
	mov qword [curr_isr], isr161.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 161 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr162:
	mov qword [curr_isr], isr162.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 162 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr163:
	mov qword [curr_isr], isr163.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 163 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr164:
	mov qword [curr_isr], isr164.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 164 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr165:
	mov qword [curr_isr], isr165.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 165 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr166:
	mov qword [curr_isr], isr166.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 166 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr167:
	mov qword [curr_isr], isr167.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 167 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr168:
	mov qword [curr_isr], isr168.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 168 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr169:
	mov qword [curr_isr], isr169.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 169 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr170:
	mov qword [curr_isr], isr170.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 170 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr171:
	mov qword [curr_isr], isr171.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 171 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr172:
	mov qword [curr_isr], isr172.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 172 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr173:
	mov qword [curr_isr], isr173.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 173 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr174:
	mov qword [curr_isr], isr174.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 174 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr175:
	mov qword [curr_isr], isr175.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 175 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr176:
	mov qword [curr_isr], isr176.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 176 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr177:
	mov qword [curr_isr], isr177.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 177 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr178:
	mov qword [curr_isr], isr178.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 178 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr179:
	mov qword [curr_isr], isr179.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 179 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr180:
	mov qword [curr_isr], isr180.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 180 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr181:
	mov qword [curr_isr], isr181.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 181 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr182:
	mov qword [curr_isr], isr182.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 182 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr183:
	mov qword [curr_isr], isr183.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 183 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr184:
	mov qword [curr_isr], isr184.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 184 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr185:
	mov qword [curr_isr], isr185.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 185 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr186:
	mov qword [curr_isr], isr186.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 186 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr187:
	mov qword [curr_isr], isr187.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 187 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr188:
	mov qword [curr_isr], isr188.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 188 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr189:
	mov qword [curr_isr], isr189.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 189 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr190:
	mov qword [curr_isr], isr190.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 190 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr191:
	mov qword [curr_isr], isr191.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 191 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr192:
	mov qword [curr_isr], isr192.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 192 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr193:
	mov qword [curr_isr], isr193.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 193 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr194:
	mov qword [curr_isr], isr194.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 194 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr195:
	mov qword [curr_isr], isr195.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 195 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr196:
	mov qword [curr_isr], isr196.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 196 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr197:
	mov qword [curr_isr], isr197.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 197 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr198:
	mov qword [curr_isr], isr198.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 198 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr199:
	mov qword [curr_isr], isr199.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 199 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr200:
	mov qword [curr_isr], isr200.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 200 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr201:
	mov qword [curr_isr], isr201.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 201 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr202:
	mov qword [curr_isr], isr202.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 202 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr203:
	mov qword [curr_isr], isr203.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 203 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr204:
	mov qword [curr_isr], isr204.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 204 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr205:
	mov qword [curr_isr], isr205.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 205 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr206:
	mov qword [curr_isr], isr206.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 206 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr207:
	mov qword [curr_isr], isr207.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 207 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr208:
	mov qword [curr_isr], isr208.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 208 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr209:
	mov qword [curr_isr], isr209.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 209 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr210:
	mov qword [curr_isr], isr210.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 210 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr211:
	mov qword [curr_isr], isr211.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 211 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr212:
	mov qword [curr_isr], isr212.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 212 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr213:
	mov qword [curr_isr], isr213.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 213 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr214:
	mov qword [curr_isr], isr214.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 214 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr215:
	mov qword [curr_isr], isr215.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 215 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr216:
	mov qword [curr_isr], isr216.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 216 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr217:
	mov qword [curr_isr], isr217.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 217 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr218:
	mov qword [curr_isr], isr218.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 218 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr219:
	mov qword [curr_isr], isr219.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 219 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr220:
	mov qword [curr_isr], isr220.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 220 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr221:
	mov qword [curr_isr], isr221.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 221 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr222:
	mov qword [curr_isr], isr222.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 222 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr223:
	mov qword [curr_isr], isr223.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 223 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr224:
	mov qword [curr_isr], isr224.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 224 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr225:
	mov qword [curr_isr], isr225.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 225 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr226:
	mov qword [curr_isr], isr226.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 226 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr227:
	mov qword [curr_isr], isr227.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 227 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr228:
	mov qword [curr_isr], isr228.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 228 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr229:
	mov qword [curr_isr], isr229.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 229 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr230:
	mov qword [curr_isr], isr230.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 230 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr231:
	mov qword [curr_isr], isr231.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 231 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr232:
	mov qword [curr_isr], isr232.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 232 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr233:
	mov qword [curr_isr], isr233.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 233 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr234:
	mov qword [curr_isr], isr234.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 234 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr235:
	mov qword [curr_isr], isr235.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 235 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr236:
	mov qword [curr_isr], isr236.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 236 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr237:
	mov qword [curr_isr], isr237.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 237 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr238:
	mov qword [curr_isr], isr238.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 238 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr239:
	mov qword [curr_isr], isr239.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 239 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr240:
	mov qword [curr_isr], isr240.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 240 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr241:
	mov qword [curr_isr], isr241.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 241 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr242:
	mov qword [curr_isr], isr242.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 242 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr243:
	mov qword [curr_isr], isr243.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 243 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr244:
	mov qword [curr_isr], isr244.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 244 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr245:
	mov qword [curr_isr], isr245.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 245 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr246:
	mov qword [curr_isr], isr246.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 246 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr247:
	mov qword [curr_isr], isr247.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 247 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr248:
	mov qword [curr_isr], isr248.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 248 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr249:
	mov qword [curr_isr], isr249.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 249 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr250:
	mov qword [curr_isr], isr250.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 250 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr251:
	mov qword [curr_isr], isr251.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 251 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr252:
	mov qword [curr_isr], isr252.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 252 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr253:
	mov qword [curr_isr], isr253.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 253 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr254:
	mov qword [curr_isr], isr254.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 254 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg

isr255:
	mov qword [curr_isr], isr255.after_push
	mov [error_code], RSP

	; Push all register for safety
	jmp push_reg

.after_push:

	mov RDI, 255 ; irq number, 1st arg
	mov RSI, error_code ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler 

	; pop registers and iretq from isr
	jmp pop_reg
