
; FILE GENERATED BY /home/cpe454/Desktop/OS/src/py/init_ints_generator.py
; ANY CHANGES TO THIS FILE WILL BE OVERWRITTEN BY THE SCRIPT

extern setup_idt
extern generic_interrupt_handler

global init_ints

global isr0
global isr1
global isr2
global isr3
global isr4
global isr5
global isr6
global isr7
global isr8
global isr9
global isr10
global isr11
global isr12
global isr13
global isr14
global isr15
global isr16
global isr17
global isr18
global isr19
global isr20
global isr21
global isr22
global isr23
global isr24
global isr25
global isr26
global isr27
global isr28
global isr29
global isr30
global isr31
global isr32
global isr33
global isr34
global isr35
global isr36
global isr37
global isr38
global isr39
global isr40
global isr41
global isr42
global isr43
global isr44
global isr45
global isr46
global isr47
global isr48
global isr49
global isr50
global isr51
global isr52
global isr53
global isr54
global isr55
global isr56
global isr57
global isr58
global isr59
global isr60
global isr61
global isr62
global isr63
global isr64
global isr65
global isr66
global isr67
global isr68
global isr69
global isr70
global isr71
global isr72
global isr73
global isr74
global isr75
global isr76
global isr77
global isr78
global isr79
global isr80
global isr81
global isr82
global isr83
global isr84
global isr85
global isr86
global isr87
global isr88
global isr89
global isr90
global isr91
global isr92
global isr93
global isr94
global isr95
global isr96
global isr97
global isr98
global isr99
global isr100
global isr101
global isr102
global isr103
global isr104
global isr105
global isr106
global isr107
global isr108
global isr109
global isr110
global isr111
global isr112
global isr113
global isr114
global isr115
global isr116
global isr117
global isr118
global isr119
global isr120
global isr121
global isr122
global isr123
global isr124
global isr125
global isr126
global isr127
global isr128
global isr129
global isr130
global isr131
global isr132
global isr133
global isr134
global isr135
global isr136
global isr137
global isr138
global isr139
global isr140
global isr141
global isr142
global isr143
global isr144
global isr145
global isr146
global isr147
global isr148
global isr149
global isr150
global isr151
global isr152
global isr153
global isr154
global isr155
global isr156
global isr157
global isr158
global isr159
global isr160
global isr161
global isr162
global isr163
global isr164
global isr165
global isr166
global isr167
global isr168
global isr169
global isr170
global isr171
global isr172
global isr173
global isr174
global isr175
global isr176
global isr177
global isr178
global isr179
global isr180
global isr181
global isr182
global isr183
global isr184
global isr185
global isr186
global isr187
global isr188
global isr189
global isr190
global isr191
global isr192
global isr193
global isr194
global isr195
global isr196
global isr197
global isr198
global isr199
global isr200
global isr201
global isr202
global isr203
global isr204
global isr205
global isr206
global isr207
global isr208
global isr209
global isr210
global isr211
global isr212
global isr213
global isr214
global isr215
global isr216
global isr217
global isr218
global isr219
global isr220
global isr221
global isr222
global isr223
global isr224
global isr225
global isr226
global isr227
global isr228
global isr229
global isr230
global isr231
global isr232
global isr233
global isr234
global isr235
global isr236
global isr237
global isr238
global isr239
global isr240
global isr241
global isr242
global isr243
global isr244
global isr245
global isr246
global isr247
global isr248
global isr249
global isr250
global isr251
global isr252
global isr253
global isr254
global isr255

section .text
init_ints:
	cli ; dissable interrupts

	call setup_idt ; Setup IDT in C

	lidt [RAX] ; return value from c
	
	sti ; enable interrupts

	ret

isr0:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 0 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr1:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 1 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr2:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 2 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr3:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 3 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr4:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 4 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr5:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 5 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr6:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 6 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr7:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 7 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr8:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 8 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr9:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 9 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr10:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 10 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr11:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 11 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr12:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 12 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr13:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 13 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr14:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 14 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr15:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 15 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr16:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 16 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr17:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 17 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr18:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 18 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr19:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 19 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr20:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 20 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr21:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 21 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr22:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 22 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr23:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 23 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr24:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 24 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr25:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 25 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr26:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 26 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr27:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 27 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr28:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 28 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr29:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 29 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr30:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 30 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr31:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 31 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr32:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 32 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr33:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 33 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr34:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 34 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr35:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 35 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr36:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 36 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr37:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 37 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr38:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 38 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr39:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 39 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr40:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 40 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr41:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 41 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr42:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 42 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr43:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 43 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr44:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 44 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr45:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 45 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr46:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 46 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr47:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 47 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr48:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 48 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr49:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 49 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr50:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 50 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr51:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 51 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr52:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 52 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr53:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 53 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr54:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 54 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr55:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 55 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr56:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 56 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr57:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 57 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr58:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 58 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr59:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 59 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr60:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 60 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr61:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 61 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr62:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 62 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr63:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 63 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr64:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 64 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr65:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 65 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr66:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 66 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr67:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 67 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr68:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 68 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr69:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 69 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr70:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 70 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr71:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 71 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr72:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 72 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr73:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 73 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr74:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 74 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr75:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 75 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr76:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 76 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr77:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 77 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr78:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 78 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr79:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 79 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr80:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 80 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr81:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 81 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr82:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 82 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr83:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 83 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr84:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 84 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr85:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 85 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr86:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 86 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr87:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 87 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr88:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 88 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr89:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 89 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr90:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 90 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr91:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 91 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr92:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 92 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr93:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 93 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr94:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 94 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr95:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 95 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr96:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 96 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr97:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 97 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr98:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 98 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr99:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 99 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr100:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 100 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr101:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 101 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr102:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 102 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr103:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 103 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr104:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 104 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr105:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 105 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr106:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 106 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr107:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 107 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr108:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 108 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr109:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 109 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr110:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 110 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr111:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 111 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr112:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 112 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr113:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 113 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr114:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 114 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr115:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 115 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr116:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 116 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr117:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 117 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr118:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 118 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr119:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 119 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr120:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 120 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr121:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 121 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr122:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 122 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr123:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 123 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr124:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 124 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr125:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 125 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr126:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 126 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr127:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 127 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr128:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 128 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr129:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 129 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr130:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 130 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr131:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 131 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr132:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 132 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr133:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 133 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr134:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 134 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr135:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 135 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr136:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 136 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr137:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 137 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr138:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 138 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr139:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 139 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr140:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 140 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr141:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 141 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr142:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 142 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr143:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 143 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr144:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 144 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr145:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 145 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr146:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 146 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr147:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 147 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr148:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 148 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr149:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 149 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr150:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 150 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr151:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 151 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr152:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 152 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr153:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 153 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr154:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 154 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr155:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 155 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr156:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 156 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr157:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 157 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr158:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 158 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr159:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 159 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr160:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 160 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr161:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 161 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr162:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 162 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr163:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 163 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr164:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 164 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr165:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 165 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr166:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 166 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr167:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 167 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr168:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 168 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr169:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 169 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr170:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 170 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr171:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 171 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr172:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 172 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr173:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 173 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr174:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 174 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr175:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 175 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr176:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 176 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr177:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 177 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr178:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 178 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr179:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 179 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr180:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 180 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr181:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 181 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr182:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 182 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr183:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 183 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr184:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 184 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr185:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 185 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr186:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 186 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr187:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 187 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr188:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 188 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr189:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 189 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr190:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 190 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr191:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 191 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr192:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 192 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr193:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 193 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr194:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 194 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr195:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 195 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr196:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 196 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr197:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 197 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr198:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 198 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr199:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 199 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr200:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 200 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr201:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 201 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr202:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 202 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr203:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 203 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr204:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 204 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr205:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 205 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr206:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 206 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr207:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 207 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr208:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 208 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr209:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 209 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr210:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 210 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr211:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 211 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr212:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 212 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr213:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 213 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr214:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 214 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr215:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 215 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr216:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 216 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr217:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 217 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr218:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 218 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr219:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 219 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr220:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 220 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr221:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 221 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr222:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 222 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr223:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 223 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr224:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 224 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr225:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 225 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr226:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 226 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr227:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 227 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr228:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 228 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr229:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 229 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr230:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 230 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr231:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 231 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr232:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 232 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr233:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 233 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr234:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 234 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr235:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 235 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr236:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 236 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr237:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 237 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr238:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 238 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr239:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 239 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr240:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 240 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr241:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 241 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr242:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 242 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr243:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 243 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr244:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 244 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr245:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 245 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr246:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 246 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr247:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 247 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr248:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 248 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr249:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 249 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr250:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 250 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr251:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 251 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr252:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 252 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr253:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 253 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr254:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 254 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq

isr255:
	; Push all register for safety
	push RBP
	push RBX
	push RSP
	push R12
	push R13
	; push R14
	; push R15
	; push RAX
	; push RCX
	; push RDX
	; push RSI
	; push RDI
	; push R8
	; push R9
	; push R10
	; push R11
	
	mov RDI, 255 ; irq number, 1st arg
	mov RSI, [RSP] ; error code, 2nd arg. Not present in some isr but doesn't matter, loading some garbage instead 

	call generic_interrupt_handler

	; Pop in FILO order
	; pop R11
	; pop R10
	; pop R9
	; pop R8
	; pop RDI
	; pop RSI
	; pop RDX
	; pop RCX
	; pop RAX
	; pop R15
	; pop R14
	pop R13
	pop R12
	pop RSP
	pop RBX
	pop RBP

	mov	al, 0x20 ; Ack the interrupt
	out	0x20, al

	iretq
