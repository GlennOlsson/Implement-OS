
; FILE GENERATED BY /home/cpe454/Desktop/OS/src/py/init_ints_generator.py
; ANY CHANGES TO THIS FILE WILL BE OVERWRITTEN BY THE SCRIPT

extern setup_idt
extern generic_interrupt_handler

extern VGA_print_long_hex
extern VGA_display_char

global init_ints

global isr0
global isr1
global isr2
global isr3
global isr4
global isr5
global isr6
global isr7
global isr8
global isr9
global isr10
global isr11
global isr12
global isr13
global isr14
global isr15
global isr16
global isr17
global isr18
global isr19
global isr20
global isr21
global isr22
global isr23
global isr24
global isr25
global isr26
global isr27
global isr28
global isr29
global isr30
global isr31
global isr32
global isr33
global isr34
global isr35
global isr36
global isr37
global isr38
global isr39
global isr40
global isr41
global isr42
global isr43
global isr44
global isr45
global isr46
global isr47
global isr48
global isr49
global isr50
global isr51
global isr52
global isr53
global isr54
global isr55
global isr56
global isr57
global isr58
global isr59
global isr60
global isr61
global isr62
global isr63
global isr64
global isr65
global isr66
global isr67
global isr68
global isr69
global isr70
global isr71
global isr72
global isr73
global isr74
global isr75
global isr76
global isr77
global isr78
global isr79
global isr80
global isr81
global isr82
global isr83
global isr84
global isr85
global isr86
global isr87
global isr88
global isr89
global isr90
global isr91
global isr92
global isr93
global isr94
global isr95
global isr96
global isr97
global isr98
global isr99
global isr100
global isr101
global isr102
global isr103
global isr104
global isr105
global isr106
global isr107
global isr108
global isr109
global isr110
global isr111
global isr112
global isr113
global isr114
global isr115
global isr116
global isr117
global isr118
global isr119
global isr120
global isr121
global isr122
global isr123
global isr124
global isr125
global isr126
global isr127
global isr128
global isr129
global isr130
global isr131
global isr132
global isr133
global isr134
global isr135
global isr136
global isr137
global isr138
global isr139
global isr140
global isr141
global isr142
global isr143
global isr144
global isr145
global isr146
global isr147
global isr148
global isr149
global isr150
global isr151
global isr152
global isr153
global isr154
global isr155
global isr156
global isr157
global isr158
global isr159
global isr160
global isr161
global isr162
global isr163
global isr164
global isr165
global isr166
global isr167
global isr168
global isr169
global isr170
global isr171
global isr172
global isr173
global isr174
global isr175
global isr176
global isr177
global isr178
global isr179
global isr180
global isr181
global isr182
global isr183
global isr184
global isr185
global isr186
global isr187
global isr188
global isr189
global isr190
global isr191
global isr192
global isr193
global isr194
global isr195
global isr196
global isr197
global isr198
global isr199
global isr200
global isr201
global isr202
global isr203
global isr204
global isr205
global isr206
global isr207
global isr208
global isr209
global isr210
global isr211
global isr212
global isr213
global isr214
global isr215
global isr216
global isr217
global isr218
global isr219
global isr220
global isr221
global isr222
global isr223
global isr224
global isr225
global isr226
global isr227
global isr228
global isr229
global isr230
global isr231
global isr232
global isr233
global isr234
global isr235
global isr236
global isr237
global isr238
global isr239
global isr240
global isr241
global isr242
global isr243
global isr244
global isr245
global isr246
global isr247
global isr248
global isr249
global isr250
global isr251
global isr252
global isr253
global isr254
global isr255

section .bss
align 8
curr_isr:
.after_push:
	resb 8
.after_pop:
	resb 8

error_code:
	resb 8

section .text
init_ints:
	cli ; dissable interrupts

	call setup_idt ; Setup IDT in C

	lidt [RAX] ; return value from c

	; enable interrupts in kmain

	ret

push_reg: ; Push all registers
	push RSI
	push RBP
	push RBX
	push RSP
	push RAX
	push RCX
	push RDX
	push RDI
	push R12
	push R13
	push R14
	push R15
	push R8
	push R9
	push R10
	push R11
	jmp [curr_isr.after_push]

pop_reg: ; Pop in FILO order
	pop R11
	pop R10
	pop R9
	pop R8
	pop R15
	pop R14
	pop R13
	pop R12
	pop RDI
	pop RDX
	pop RCX
	pop RAX
	pop RSP
	pop RBX
	pop RBP
	pop RSI

	jmp [curr_isr.after_pop]


isr0:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr0.after_push
	mov qword [curr_isr.after_pop], isr0.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 0 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr1:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr1.after_push
	mov qword [curr_isr.after_pop], isr1.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 1 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr2:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr2.after_push
	mov qword [curr_isr.after_pop], isr2.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 2 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr3:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr3.after_push
	mov qword [curr_isr.after_pop], isr3.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 3 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr4:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr4.after_push
	mov qword [curr_isr.after_pop], isr4.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 4 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr5:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr5.after_push
	mov qword [curr_isr.after_pop], isr5.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 5 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr6:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr6.after_push
	mov qword [curr_isr.after_pop], isr6.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 6 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr7:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr7.after_push
	mov qword [curr_isr.after_pop], isr7.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 7 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr8:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr8.after_push
	mov qword [curr_isr.after_pop], isr8.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 8 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr9:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr9.after_push
	mov qword [curr_isr.after_pop], isr9.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 9 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr10:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr10.after_push
	mov qword [curr_isr.after_pop], isr10.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 10 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr11:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr11.after_push
	mov qword [curr_isr.after_pop], isr11.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 11 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr12:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr12.after_push
	mov qword [curr_isr.after_pop], isr12.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 12 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr13:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr13.after_push
	mov qword [curr_isr.after_pop], isr13.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 13 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr14:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr14.after_push
	mov qword [curr_isr.after_pop], isr14.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 14 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr15:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr15.after_push
	mov qword [curr_isr.after_pop], isr15.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 15 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr16:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr16.after_push
	mov qword [curr_isr.after_pop], isr16.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 16 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr17:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr17.after_push
	mov qword [curr_isr.after_pop], isr17.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RSI, [RSP + 8 * 16]

	mov RDI, 17 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	add RSP, 8

	iretq

isr18:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr18.after_push
	mov qword [curr_isr.after_pop], isr18.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 18 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr19:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr19.after_push
	mov qword [curr_isr.after_pop], isr19.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 19 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr20:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr20.after_push
	mov qword [curr_isr.after_pop], isr20.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 20 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr21:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr21.after_push
	mov qword [curr_isr.after_pop], isr21.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 21 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr22:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr22.after_push
	mov qword [curr_isr.after_pop], isr22.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 22 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr23:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr23.after_push
	mov qword [curr_isr.after_pop], isr23.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 23 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr24:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr24.after_push
	mov qword [curr_isr.after_pop], isr24.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 24 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr25:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr25.after_push
	mov qword [curr_isr.after_pop], isr25.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 25 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr26:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr26.after_push
	mov qword [curr_isr.after_pop], isr26.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 26 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr27:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr27.after_push
	mov qword [curr_isr.after_pop], isr27.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 27 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr28:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr28.after_push
	mov qword [curr_isr.after_pop], isr28.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 28 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr29:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr29.after_push
	mov qword [curr_isr.after_pop], isr29.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 29 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr30:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr30.after_push
	mov qword [curr_isr.after_pop], isr30.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 30 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr31:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr31.after_push
	mov qword [curr_isr.after_pop], isr31.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 31 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr32:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr32.after_push
	mov qword [curr_isr.after_pop], isr32.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 32 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr33:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr33.after_push
	mov qword [curr_isr.after_pop], isr33.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 33 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr34:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr34.after_push
	mov qword [curr_isr.after_pop], isr34.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 34 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr35:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr35.after_push
	mov qword [curr_isr.after_pop], isr35.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 35 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr36:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr36.after_push
	mov qword [curr_isr.after_pop], isr36.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 36 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr37:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr37.after_push
	mov qword [curr_isr.after_pop], isr37.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 37 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr38:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr38.after_push
	mov qword [curr_isr.after_pop], isr38.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 38 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr39:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr39.after_push
	mov qword [curr_isr.after_pop], isr39.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 39 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr40:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr40.after_push
	mov qword [curr_isr.after_pop], isr40.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 40 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr41:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr41.after_push
	mov qword [curr_isr.after_pop], isr41.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 41 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr42:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr42.after_push
	mov qword [curr_isr.after_pop], isr42.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 42 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr43:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr43.after_push
	mov qword [curr_isr.after_pop], isr43.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 43 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr44:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr44.after_push
	mov qword [curr_isr.after_pop], isr44.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 44 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr45:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr45.after_push
	mov qword [curr_isr.after_pop], isr45.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 45 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr46:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr46.after_push
	mov qword [curr_isr.after_pop], isr46.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 46 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr47:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr47.after_push
	mov qword [curr_isr.after_pop], isr47.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 47 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr48:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr48.after_push
	mov qword [curr_isr.after_pop], isr48.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 48 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr49:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr49.after_push
	mov qword [curr_isr.after_pop], isr49.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 49 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr50:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr50.after_push
	mov qword [curr_isr.after_pop], isr50.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 50 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr51:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr51.after_push
	mov qword [curr_isr.after_pop], isr51.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 51 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr52:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr52.after_push
	mov qword [curr_isr.after_pop], isr52.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 52 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr53:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr53.after_push
	mov qword [curr_isr.after_pop], isr53.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 53 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr54:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr54.after_push
	mov qword [curr_isr.after_pop], isr54.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 54 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr55:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr55.after_push
	mov qword [curr_isr.after_pop], isr55.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 55 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr56:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr56.after_push
	mov qword [curr_isr.after_pop], isr56.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 56 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr57:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr57.after_push
	mov qword [curr_isr.after_pop], isr57.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 57 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr58:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr58.after_push
	mov qword [curr_isr.after_pop], isr58.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 58 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr59:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr59.after_push
	mov qword [curr_isr.after_pop], isr59.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 59 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr60:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr60.after_push
	mov qword [curr_isr.after_pop], isr60.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 60 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr61:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr61.after_push
	mov qword [curr_isr.after_pop], isr61.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 61 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr62:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr62.after_push
	mov qword [curr_isr.after_pop], isr62.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 62 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr63:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr63.after_push
	mov qword [curr_isr.after_pop], isr63.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 63 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr64:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr64.after_push
	mov qword [curr_isr.after_pop], isr64.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 64 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr65:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr65.after_push
	mov qword [curr_isr.after_pop], isr65.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 65 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr66:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr66.after_push
	mov qword [curr_isr.after_pop], isr66.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 66 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr67:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr67.after_push
	mov qword [curr_isr.after_pop], isr67.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 67 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr68:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr68.after_push
	mov qword [curr_isr.after_pop], isr68.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 68 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr69:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr69.after_push
	mov qword [curr_isr.after_pop], isr69.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 69 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr70:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr70.after_push
	mov qword [curr_isr.after_pop], isr70.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 70 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr71:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr71.after_push
	mov qword [curr_isr.after_pop], isr71.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 71 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr72:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr72.after_push
	mov qword [curr_isr.after_pop], isr72.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 72 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr73:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr73.after_push
	mov qword [curr_isr.after_pop], isr73.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 73 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr74:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr74.after_push
	mov qword [curr_isr.after_pop], isr74.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 74 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr75:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr75.after_push
	mov qword [curr_isr.after_pop], isr75.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 75 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr76:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr76.after_push
	mov qword [curr_isr.after_pop], isr76.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 76 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr77:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr77.after_push
	mov qword [curr_isr.after_pop], isr77.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 77 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr78:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr78.after_push
	mov qword [curr_isr.after_pop], isr78.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 78 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr79:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr79.after_push
	mov qword [curr_isr.after_pop], isr79.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 79 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr80:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr80.after_push
	mov qword [curr_isr.after_pop], isr80.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 80 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr81:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr81.after_push
	mov qword [curr_isr.after_pop], isr81.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 81 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr82:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr82.after_push
	mov qword [curr_isr.after_pop], isr82.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 82 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr83:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr83.after_push
	mov qword [curr_isr.after_pop], isr83.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 83 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr84:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr84.after_push
	mov qword [curr_isr.after_pop], isr84.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 84 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr85:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr85.after_push
	mov qword [curr_isr.after_pop], isr85.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 85 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr86:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr86.after_push
	mov qword [curr_isr.after_pop], isr86.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 86 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr87:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr87.after_push
	mov qword [curr_isr.after_pop], isr87.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 87 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr88:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr88.after_push
	mov qword [curr_isr.after_pop], isr88.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 88 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr89:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr89.after_push
	mov qword [curr_isr.after_pop], isr89.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 89 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr90:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr90.after_push
	mov qword [curr_isr.after_pop], isr90.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 90 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr91:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr91.after_push
	mov qword [curr_isr.after_pop], isr91.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 91 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr92:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr92.after_push
	mov qword [curr_isr.after_pop], isr92.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 92 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr93:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr93.after_push
	mov qword [curr_isr.after_pop], isr93.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 93 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr94:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr94.after_push
	mov qword [curr_isr.after_pop], isr94.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 94 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr95:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr95.after_push
	mov qword [curr_isr.after_pop], isr95.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 95 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr96:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr96.after_push
	mov qword [curr_isr.after_pop], isr96.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 96 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr97:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr97.after_push
	mov qword [curr_isr.after_pop], isr97.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 97 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr98:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr98.after_push
	mov qword [curr_isr.after_pop], isr98.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 98 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr99:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr99.after_push
	mov qword [curr_isr.after_pop], isr99.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 99 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr100:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr100.after_push
	mov qword [curr_isr.after_pop], isr100.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 100 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr101:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr101.after_push
	mov qword [curr_isr.after_pop], isr101.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 101 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr102:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr102.after_push
	mov qword [curr_isr.after_pop], isr102.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 102 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr103:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr103.after_push
	mov qword [curr_isr.after_pop], isr103.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 103 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr104:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr104.after_push
	mov qword [curr_isr.after_pop], isr104.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 104 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr105:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr105.after_push
	mov qword [curr_isr.after_pop], isr105.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 105 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr106:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr106.after_push
	mov qword [curr_isr.after_pop], isr106.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 106 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr107:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr107.after_push
	mov qword [curr_isr.after_pop], isr107.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 107 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr108:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr108.after_push
	mov qword [curr_isr.after_pop], isr108.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 108 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr109:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr109.after_push
	mov qword [curr_isr.after_pop], isr109.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 109 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr110:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr110.after_push
	mov qword [curr_isr.after_pop], isr110.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 110 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr111:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr111.after_push
	mov qword [curr_isr.after_pop], isr111.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 111 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr112:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr112.after_push
	mov qword [curr_isr.after_pop], isr112.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 112 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr113:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr113.after_push
	mov qword [curr_isr.after_pop], isr113.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 113 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr114:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr114.after_push
	mov qword [curr_isr.after_pop], isr114.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 114 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr115:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr115.after_push
	mov qword [curr_isr.after_pop], isr115.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 115 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr116:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr116.after_push
	mov qword [curr_isr.after_pop], isr116.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 116 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr117:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr117.after_push
	mov qword [curr_isr.after_pop], isr117.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 117 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr118:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr118.after_push
	mov qword [curr_isr.after_pop], isr118.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 118 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr119:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr119.after_push
	mov qword [curr_isr.after_pop], isr119.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 119 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr120:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr120.after_push
	mov qword [curr_isr.after_pop], isr120.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 120 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr121:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr121.after_push
	mov qword [curr_isr.after_pop], isr121.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 121 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr122:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr122.after_push
	mov qword [curr_isr.after_pop], isr122.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 122 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr123:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr123.after_push
	mov qword [curr_isr.after_pop], isr123.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 123 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr124:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr124.after_push
	mov qword [curr_isr.after_pop], isr124.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 124 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr125:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr125.after_push
	mov qword [curr_isr.after_pop], isr125.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 125 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr126:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr126.after_push
	mov qword [curr_isr.after_pop], isr126.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 126 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr127:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr127.after_push
	mov qword [curr_isr.after_pop], isr127.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 127 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr128:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr128.after_push
	mov qword [curr_isr.after_pop], isr128.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 128 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr129:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr129.after_push
	mov qword [curr_isr.after_pop], isr129.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 129 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr130:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr130.after_push
	mov qword [curr_isr.after_pop], isr130.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 130 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr131:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr131.after_push
	mov qword [curr_isr.after_pop], isr131.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 131 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr132:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr132.after_push
	mov qword [curr_isr.after_pop], isr132.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 132 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr133:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr133.after_push
	mov qword [curr_isr.after_pop], isr133.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 133 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr134:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr134.after_push
	mov qword [curr_isr.after_pop], isr134.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 134 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr135:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr135.after_push
	mov qword [curr_isr.after_pop], isr135.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 135 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr136:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr136.after_push
	mov qword [curr_isr.after_pop], isr136.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 136 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr137:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr137.after_push
	mov qword [curr_isr.after_pop], isr137.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 137 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr138:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr138.after_push
	mov qword [curr_isr.after_pop], isr138.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 138 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr139:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr139.after_push
	mov qword [curr_isr.after_pop], isr139.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 139 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr140:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr140.after_push
	mov qword [curr_isr.after_pop], isr140.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 140 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr141:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr141.after_push
	mov qword [curr_isr.after_pop], isr141.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 141 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr142:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr142.after_push
	mov qword [curr_isr.after_pop], isr142.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 142 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr143:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr143.after_push
	mov qword [curr_isr.after_pop], isr143.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 143 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr144:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr144.after_push
	mov qword [curr_isr.after_pop], isr144.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 144 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr145:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr145.after_push
	mov qword [curr_isr.after_pop], isr145.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 145 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr146:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr146.after_push
	mov qword [curr_isr.after_pop], isr146.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 146 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr147:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr147.after_push
	mov qword [curr_isr.after_pop], isr147.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 147 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr148:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr148.after_push
	mov qword [curr_isr.after_pop], isr148.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 148 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr149:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr149.after_push
	mov qword [curr_isr.after_pop], isr149.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 149 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr150:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr150.after_push
	mov qword [curr_isr.after_pop], isr150.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 150 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr151:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr151.after_push
	mov qword [curr_isr.after_pop], isr151.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 151 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr152:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr152.after_push
	mov qword [curr_isr.after_pop], isr152.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 152 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr153:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr153.after_push
	mov qword [curr_isr.after_pop], isr153.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 153 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr154:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr154.after_push
	mov qword [curr_isr.after_pop], isr154.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 154 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr155:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr155.after_push
	mov qword [curr_isr.after_pop], isr155.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 155 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr156:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr156.after_push
	mov qword [curr_isr.after_pop], isr156.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 156 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr157:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr157.after_push
	mov qword [curr_isr.after_pop], isr157.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 157 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr158:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr158.after_push
	mov qword [curr_isr.after_pop], isr158.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 158 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr159:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr159.after_push
	mov qword [curr_isr.after_pop], isr159.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 159 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr160:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr160.after_push
	mov qword [curr_isr.after_pop], isr160.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 160 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr161:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr161.after_push
	mov qword [curr_isr.after_pop], isr161.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 161 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr162:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr162.after_push
	mov qword [curr_isr.after_pop], isr162.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 162 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr163:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr163.after_push
	mov qword [curr_isr.after_pop], isr163.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 163 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr164:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr164.after_push
	mov qword [curr_isr.after_pop], isr164.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 164 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr165:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr165.after_push
	mov qword [curr_isr.after_pop], isr165.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 165 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr166:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr166.after_push
	mov qword [curr_isr.after_pop], isr166.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 166 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr167:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr167.after_push
	mov qword [curr_isr.after_pop], isr167.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 167 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr168:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr168.after_push
	mov qword [curr_isr.after_pop], isr168.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 168 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr169:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr169.after_push
	mov qword [curr_isr.after_pop], isr169.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 169 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr170:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr170.after_push
	mov qword [curr_isr.after_pop], isr170.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 170 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr171:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr171.after_push
	mov qword [curr_isr.after_pop], isr171.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 171 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr172:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr172.after_push
	mov qword [curr_isr.after_pop], isr172.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 172 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr173:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr173.after_push
	mov qword [curr_isr.after_pop], isr173.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 173 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr174:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr174.after_push
	mov qword [curr_isr.after_pop], isr174.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 174 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr175:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr175.after_push
	mov qword [curr_isr.after_pop], isr175.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 175 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr176:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr176.after_push
	mov qword [curr_isr.after_pop], isr176.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 176 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr177:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr177.after_push
	mov qword [curr_isr.after_pop], isr177.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 177 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr178:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr178.after_push
	mov qword [curr_isr.after_pop], isr178.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 178 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr179:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr179.after_push
	mov qword [curr_isr.after_pop], isr179.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 179 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr180:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr180.after_push
	mov qword [curr_isr.after_pop], isr180.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 180 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr181:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr181.after_push
	mov qword [curr_isr.after_pop], isr181.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 181 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr182:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr182.after_push
	mov qword [curr_isr.after_pop], isr182.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 182 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr183:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr183.after_push
	mov qword [curr_isr.after_pop], isr183.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 183 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr184:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr184.after_push
	mov qword [curr_isr.after_pop], isr184.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 184 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr185:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr185.after_push
	mov qword [curr_isr.after_pop], isr185.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 185 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr186:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr186.after_push
	mov qword [curr_isr.after_pop], isr186.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 186 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr187:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr187.after_push
	mov qword [curr_isr.after_pop], isr187.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 187 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr188:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr188.after_push
	mov qword [curr_isr.after_pop], isr188.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 188 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr189:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr189.after_push
	mov qword [curr_isr.after_pop], isr189.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 189 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr190:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr190.after_push
	mov qword [curr_isr.after_pop], isr190.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 190 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr191:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr191.after_push
	mov qword [curr_isr.after_pop], isr191.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 191 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr192:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr192.after_push
	mov qword [curr_isr.after_pop], isr192.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 192 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr193:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr193.after_push
	mov qword [curr_isr.after_pop], isr193.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 193 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr194:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr194.after_push
	mov qword [curr_isr.after_pop], isr194.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 194 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr195:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr195.after_push
	mov qword [curr_isr.after_pop], isr195.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 195 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr196:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr196.after_push
	mov qword [curr_isr.after_pop], isr196.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 196 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr197:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr197.after_push
	mov qword [curr_isr.after_pop], isr197.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 197 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr198:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr198.after_push
	mov qword [curr_isr.after_pop], isr198.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 198 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr199:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr199.after_push
	mov qword [curr_isr.after_pop], isr199.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 199 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr200:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr200.after_push
	mov qword [curr_isr.after_pop], isr200.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 200 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr201:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr201.after_push
	mov qword [curr_isr.after_pop], isr201.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 201 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr202:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr202.after_push
	mov qword [curr_isr.after_pop], isr202.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 202 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr203:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr203.after_push
	mov qword [curr_isr.after_pop], isr203.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 203 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr204:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr204.after_push
	mov qword [curr_isr.after_pop], isr204.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 204 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr205:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr205.after_push
	mov qword [curr_isr.after_pop], isr205.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 205 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr206:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr206.after_push
	mov qword [curr_isr.after_pop], isr206.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 206 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr207:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr207.after_push
	mov qword [curr_isr.after_pop], isr207.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 207 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr208:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr208.after_push
	mov qword [curr_isr.after_pop], isr208.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 208 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr209:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr209.after_push
	mov qword [curr_isr.after_pop], isr209.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 209 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr210:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr210.after_push
	mov qword [curr_isr.after_pop], isr210.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 210 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr211:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr211.after_push
	mov qword [curr_isr.after_pop], isr211.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 211 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr212:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr212.after_push
	mov qword [curr_isr.after_pop], isr212.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 212 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr213:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr213.after_push
	mov qword [curr_isr.after_pop], isr213.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 213 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr214:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr214.after_push
	mov qword [curr_isr.after_pop], isr214.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 214 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr215:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr215.after_push
	mov qword [curr_isr.after_pop], isr215.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 215 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr216:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr216.after_push
	mov qword [curr_isr.after_pop], isr216.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 216 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr217:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr217.after_push
	mov qword [curr_isr.after_pop], isr217.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 217 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr218:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr218.after_push
	mov qword [curr_isr.after_pop], isr218.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 218 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr219:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr219.after_push
	mov qword [curr_isr.after_pop], isr219.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 219 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr220:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr220.after_push
	mov qword [curr_isr.after_pop], isr220.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 220 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr221:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr221.after_push
	mov qword [curr_isr.after_pop], isr221.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 221 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr222:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr222.after_push
	mov qword [curr_isr.after_pop], isr222.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 222 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr223:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr223.after_push
	mov qword [curr_isr.after_pop], isr223.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 223 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr224:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr224.after_push
	mov qword [curr_isr.after_pop], isr224.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 224 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr225:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr225.after_push
	mov qword [curr_isr.after_pop], isr225.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 225 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr226:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr226.after_push
	mov qword [curr_isr.after_pop], isr226.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 226 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr227:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr227.after_push
	mov qword [curr_isr.after_pop], isr227.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 227 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr228:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr228.after_push
	mov qword [curr_isr.after_pop], isr228.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 228 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr229:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr229.after_push
	mov qword [curr_isr.after_pop], isr229.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 229 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr230:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr230.after_push
	mov qword [curr_isr.after_pop], isr230.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 230 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr231:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr231.after_push
	mov qword [curr_isr.after_pop], isr231.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 231 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr232:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr232.after_push
	mov qword [curr_isr.after_pop], isr232.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 232 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr233:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr233.after_push
	mov qword [curr_isr.after_pop], isr233.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 233 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr234:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr234.after_push
	mov qword [curr_isr.after_pop], isr234.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 234 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr235:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr235.after_push
	mov qword [curr_isr.after_pop], isr235.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 235 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr236:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr236.after_push
	mov qword [curr_isr.after_pop], isr236.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 236 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr237:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr237.after_push
	mov qword [curr_isr.after_pop], isr237.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 237 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr238:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr238.after_push
	mov qword [curr_isr.after_pop], isr238.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 238 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr239:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr239.after_push
	mov qword [curr_isr.after_pop], isr239.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 239 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr240:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr240.after_push
	mov qword [curr_isr.after_pop], isr240.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 240 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr241:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr241.after_push
	mov qword [curr_isr.after_pop], isr241.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 241 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr242:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr242.after_push
	mov qword [curr_isr.after_pop], isr242.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 242 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr243:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr243.after_push
	mov qword [curr_isr.after_pop], isr243.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 243 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr244:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr244.after_push
	mov qword [curr_isr.after_pop], isr244.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 244 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr245:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr245.after_push
	mov qword [curr_isr.after_pop], isr245.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 245 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr246:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr246.after_push
	mov qword [curr_isr.after_pop], isr246.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 246 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr247:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr247.after_push
	mov qword [curr_isr.after_pop], isr247.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 247 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr248:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr248.after_push
	mov qword [curr_isr.after_pop], isr248.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 248 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr249:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr249.after_push
	mov qword [curr_isr.after_pop], isr249.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 249 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr250:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr250.after_push
	mov qword [curr_isr.after_pop], isr250.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 250 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr251:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr251.after_push
	mov qword [curr_isr.after_pop], isr251.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 251 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr252:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr252.after_push
	mov qword [curr_isr.after_pop], isr252.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 252 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr253:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr253.after_push
	mov qword [curr_isr.after_pop], isr253.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 253 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr254:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr254.after_push
	mov qword [curr_isr.after_pop], isr254.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 254 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq

isr255:
	; register jump-back instructions
	mov qword [curr_isr.after_push], isr255.after_push
	mov qword [curr_isr.after_pop], isr255.after_pop

	; Push all register for safety
	jmp push_reg

.after_push:
	
	mov RDI, 255 ; irq number, 1st arg
	;mov RSI, [RSP]

	call generic_interrupt_handler 

	; pop registers
	jmp pop_reg
.after_pop:
	
	iretq
